{"version":3,"file":"static/js/790.c2ac5d53.chunk.js","mappings":"+MAQMA,EAAUC,EAAAA,GAAAA,IAAU,ghGAiDR,YAAQ,SAALC,MAAkBC,uBAAuB,IAK5C,YAAQ,SAALD,MAAkBC,uBAAuB,IAGjD,YAAQ,SAALD,MAAkBE,iBAAiB,IAIjC,YAAQ,SAALF,MAAkBC,uBAAuB,IAGjD,YAAQ,SAALD,MAAkBE,iBAAiB,IAIjC,YAAQ,SAALF,MAAkBC,uBAAuB,IAG5C,YAAQ,SAALD,MAAkBC,uBAAuB,IAO5C,YAAQ,SAALD,MAAkBG,uBAAuB,IAItC,YAAQ,SAALH,MAAkBI,uBAAuB,IAGjD,YAAQ,SAALJ,MAAkBG,uBAAuB,IAClD,YAAQ,SAALH,MAAkBE,iBAAiB,IAQrB,YAAQ,SAALF,MAAkBK,iBAAiB,IACvD,YAAQ,SAALL,MAAkBE,iBAAiB,IAOjC,YAAQ,SAALF,MAAkBK,iBAAiB,IAC3C,YAAQ,SAALL,MAAkBE,iBAAiB,IAuFnD,UA1DA,WACE,OAA0BI,EAAAA,EAAAA,UAAS,IAAIC,MAAO,eAAvCC,EAAK,KAAEC,EAAQ,KACtB,GAAkCH,EAAAA,EAAAA,UAAS,IAAG,eAAvCI,EAAS,KAAEC,EAAY,KAC9B,GAAgCL,EAAAA,EAAAA,UAAS,IAAG,eAArCM,EAAQ,KAAEC,EAAW,KAE5B,GAA8BP,EAAAA,EAAAA,WAAS,WACrC,IAAMQ,EAAgBC,aAAaC,QAAQ,WAC3C,OAAOF,EAAgBG,KAAKC,MAAMJ,GAAiB,EACrD,IAAE,eAHKK,EAAO,KAId,GAJ0B,MAIAb,EAAAA,EAAAA,WAAS,WACjC,IAAMc,EAAcL,aAAaC,QAAQ,YACzC,OAAOI,EAAcH,KAAKC,MAAME,GAAe,EACjD,KAAE,eAHKC,EAAK,KAmBZ,OAnBsB,MAKtBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaJ,EAAQK,KAAI,SAACC,GAAE,OAChCC,IAAOD,EAAGE,KAAM,iBAAiBC,OAAO,aAAa,IAEvDjB,EAAaY,EACf,GAAG,CAACJ,KAEJG,EAAAA,EAAAA,YAAU,WACR,IAAMO,EAAYR,EAAMG,KAAI,SAACC,GAAE,OAC7BC,IAAOD,EAAGE,KAAM,iBAAiBC,OAAO,aAAa,IAEvDf,EAAYgB,EACd,GAAG,CAACR,KAGF,SAACvB,EAAO,WACN,SAAC,KAAQ,CACPW,SAAUA,EACVqB,UAAW,SAACC,EAAQJ,GAAI,OAAKD,IAAOC,GAAMC,OAAO,KAAK,EACtDpB,MAAOA,EACPwB,sBAAsB,EACtBC,YAAa,YAAqB,IAAlBN,EAAI,EAAJA,KACVO,GADoB,EAAJC,KACR,IACRC,EAAO,GAOX,OANI1B,EAAU2B,MAAK,SAACC,GAAC,OAAKA,IAAMZ,IAAOC,GAAMC,OAAO,aAAa,KAC/DM,EAAMK,MAAK,gBAAKC,UAAU,WAExB5B,EAASyB,MAAK,SAACC,GAAC,OAAKA,IAAMZ,IAAOC,GAAMC,OAAO,aAAa,KAC9DQ,EAAKG,MAAK,gBAAKC,UAAU,WAGzB,+BACE,iBAAKA,UAAU,OAAM,UAClBN,EACAE,MAIT,KAIR,C","sources":["pages/Schedule.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport styled from \"styled-components\";\r\nimport { theme } from \"../style/theme\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Monthly = styled.div`\r\n  width: 800px;\r\n  height: fit-content;\r\n  padding: 10px 10px 30px 10px;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  border-radius: 20px;\r\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);\r\n\r\n  .react-calendar {\r\n    width: 80%;\r\n    height: 100%;\r\n    margin-top: 20px;\r\n    background-color: transparent;\r\n    border: none;\r\n  }\r\n  .react-calendar__navigation button {\r\n    color: rgba(130, 130, 130, 1);\r\n    font-weight: bold;\r\n    min-width: 44px;\r\n    background: none;\r\n    font-size: 1em;\r\n    margin-top: 8px;\r\n  }\r\n  .react-calendar__navigation button:enabled:hover,\r\n  .react-calendar__navigation button:enabled:focus {\r\n    background-color: #f8f8fa;\r\n  }\r\n  .react-calendar__navigation button[disabled] {\r\n    background-color: #f0f0f0;\r\n  }\r\n  abbr[title] {\r\n    text-decoration: none;\r\n  }\r\n  /* .react-calendar__month-view__days__day--weekend {\r\n    color: #d10000;\r\n    } */\r\n  .react-calendar__tile {\r\n    height: 70px;\r\n    padding-top:20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n  }\r\n  .react-calendar__tile:enabled:hover,\r\n  .react-calendar__tile:enabled:focus {\r\n    background: ${({ theme }) => theme.calenderFocusBackground};\r\n    color: rgba(130, 130, 130, 1);\r\n    border-radius: 6px;\r\n  }\r\n  .react-calendar__tile--now {\r\n    background: ${({ theme }) => theme.calenderFocusBackground};\r\n    border-radius: 6px;\r\n    font-weight: bold;\r\n    color: ${({ theme }) => theme.calenderFocusText};\r\n  }\r\n  .react-calendar__tile--now:enabled:hover,\r\n  .react-calendar__tile--now:enabled:focus {\r\n    background: ${({ theme }) => theme.calenderFocusBackground};\r\n    border-radius: 6px;\r\n    font-weight: bold;\r\n    color: ${({ theme }) => theme.calenderFocusText};\r\n  }\r\n  .react-calendar__tile--hasActive:enabled:hover,\r\n  .react-calendar__tile--hasActive:enabled:focus {\r\n    background: ${({ theme }) => theme.calenderFocusBackground};\r\n  }\r\n  .react-calendar__tile--active {\r\n    background: ${({ theme }) => theme.calenderFocusBackground};\r\n    border-radius: 6px;\r\n    font-weight: bold;\r\n    color: white;\r\n  }\r\n  .react-calendar__tile--active:enabled:hover,\r\n  .react-calendar__tile--active:enabled:focus {\r\n    background: ${({ theme }) => theme.calenderCheckBackground};\r\n    color: white;\r\n  }\r\n  .react-calendar--selectRange .react-calendar__tile--hover {\r\n    background-color: ${({ theme }) => theme.calenderRangeBackground};\r\n  }\r\n  .react-calendar__tile--range {\r\n    background:  ${({ theme }) => theme.calenderCheckBackground};\r\n    color: ${({ theme }) => theme.calenderFocusText};\r\n    border-radius: 0;\r\n  }\r\n  .react-calendar__tile--rangeStart {\r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    border-top-left-radius: 6px;\r\n    border-bottom-left-radius: 6px;\r\n    background: background: ${({ theme }) => theme.calenderRangeText};\r\n    color: ${({ theme }) => theme.calenderFocusText};\r\n  }\r\n  .react-calendar__tile--rangeEnd {\r\n    border-top-left-radius: 0;\r\n    border-bottom-left-radius: 0;\r\n    border-top-right-radius: 6px;\r\n    border-bottom-right-radius: 6px;\r\n    background: ${({ theme }) => theme.calenderRangeText};\r\n    color: ${({ theme }) => theme.calenderFocusText};\r\n  }\r\n\r\n  .mark{\r\n    display: flex;\r\n\r\n    div{\r\n      margin: 0 2px;\r\n    }\r\n  }\r\n\r\n  .diary {\r\n    height: 7px;\r\n    width: 7px;\r\n    background-color: orange;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    margin-left: 1px;\r\n  }\r\n  .todo {\r\n    height: 7px;\r\n    width: 7px;\r\n    background-color: green;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    margin-left: 1px;\r\n  }\r\n`;\r\n\r\nfunction Schedule() {\r\n  const [value, onChange] = useState(new Date());\r\n  const [diaryDate, setDiaryDate] = useState([]);\r\n  const [todoDate, setTodoDate] = useState([]);\r\n\r\n  const [diaries, setDiaries] = useState(() => {\r\n    const storedDiaries = localStorage.getItem(\"diaries\");\r\n    return storedDiaries ? JSON.parse(storedDiaries) : [];\r\n  });\r\n  const [todos, setTodos] = useState(() => {\r\n    const storedTodos = localStorage.getItem(\"todoList\");\r\n    return storedTodos ? JSON.parse(storedTodos) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    const diaryDates = diaries.map((el) =>\r\n      moment(el.date, \"YYYY. MM. DD.\").format(\"YYYY-MM-DD\")\r\n    );\r\n    setDiaryDate(diaryDates);\r\n  }, [diaries]);\r\n\r\n  useEffect(() => {\r\n    const todoDates = todos.map((el) =>\r\n      moment(el.date, \"YYYY. MM. DD.\").format(\"YYYY-MM-DD\")\r\n    );\r\n    setTodoDate(todoDates);\r\n  }, [todos]);\r\n\r\n  return (\r\n    <Monthly>\r\n      <Calendar\r\n        onChange={onChange}\r\n        formatDay={(locale, date) => moment(date).format(\"DD\")}\r\n        value={value}\r\n        showNeighboringMonth={false}\r\n        tileContent={({ date, view }) => {\r\n          let diary = [];\r\n          let todo = [];\r\n          if (diaryDate.find((x) => x === moment(date).format(\"YYYY-MM-DD\"))) {\r\n            diary.push(<div className=\"diary\"></div>);\r\n          }\r\n          if (todoDate.find((x) => x === moment(date).format(\"YYYY-MM-DD\"))) {\r\n            todo.push(<div className=\"todo\"></div>);\r\n          }\r\n          return (\r\n            <>\r\n              <div className=\"mark\">\r\n                {diary}\r\n                {todo}\r\n              </div>\r\n            </>\r\n          );\r\n        }}\r\n      />\r\n    </Monthly>\r\n  );\r\n}\r\n\r\nexport default Schedule;\r\n"],"names":["Monthly","styled","theme","calenderFocusBackground","calenderFocusText","calenderCheckBackground","calenderRangeBackground","calenderRangeText","useState","Date","value","onChange","diaryDate","setDiaryDate","todoDate","setTodoDate","storedDiaries","localStorage","getItem","JSON","parse","diaries","storedTodos","todos","useEffect","diaryDates","map","el","moment","date","format","todoDates","formatDay","locale","showNeighboringMonth","tileContent","diary","view","todo","find","x","push","className"],"sourceRoot":""}