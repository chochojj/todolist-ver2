{"version":3,"file":"static/js/555.0ea2eaae.chunk.js","mappings":"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","sources":["components/todo/AddForm.js","components/todo/Todo.js","components/todo/TodoList.js","pages/Todo.js"],"sourcesContent":["import React, { useState, useRef, useEffect, memo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { theme } from \"../../style/theme\";\r\n\r\nconst StyledAddForm = styled.div`\r\n  button::selection {\r\n    background: none;\r\n  }\r\n  input::selection {\r\n    background: none;\r\n  }\r\n  form {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  input {\r\n    width: 275px;\r\n    height: 32px;\r\n    background-color: ${({ theme }) => theme.orangeInput};\r\n    border: none;\r\n    padding: 0 10px;\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n  input::placeholder {\r\n    color: ${({ theme }) => theme.color};\r\n  }\r\n\r\n  button {\r\n    width: 65px;\r\n    height: 32px;\r\n    border: none;\r\n    background-color: ${({ theme }) => theme.greenButton};\r\n    font-weight: bold;\r\n    font-family: \"NanumRg\";\r\n    border-radius: 0 5px 5px 0;\r\n  }\r\n  button:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst AddForm = memo(({ addTodo }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const input = useRef(null);\r\n\r\n  useEffect(() => {\r\n    input.current.focus();\r\n    setValue(\"\");\r\n  }, [addTodo]);\r\n\r\n  const onChangeInput = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <StyledAddForm>\r\n      <form className=\"add-form\">\r\n        <input\r\n          ref={input}\r\n          value={value}\r\n          onChange={onChangeInput}\r\n          placeholder={`오늘의 할 일 입력하기 !`}\r\n        />\r\n        <button type=\"submit\" onClick={addTodo(value)}>\r\n          추가\r\n        </button>\r\n      </form>\r\n    </StyledAddForm>\r\n  );\r\n});\r\n\r\nexport default AddForm;\r\n","import { useState, useRef, useEffect, memo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTodo = styled.div`\r\n  .list {\r\n    line-height: 30px;\r\n    display: flex;\r\n    list-style: none;\r\n    width: 340px;\r\n    align-items: center;\r\n    font-size:15px;\r\n    background-color: rgba(250, 240, 230, 0.425);\r\n    text-decoration: antiquewhite;\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .list .check {\r\n    cursor: pointer;\r\n    align-self: center;\r\n    font-size: 18px;\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .list .todo {\r\n    overflow-wrap: break-word;\r\n    width: 270px;\r\n  }\r\n\r\n  .checked {\r\n    text-decoration: line-through;\r\n  }\r\n\r\n  .update-form input {\r\n    background-color: transparent;\r\n    border: none;\r\n    width: 260px;\r\n    margin-right: 10px;\r\n    font-size: 15px;\r\n    padding: 0;\r\n  }\r\n\r\n  .list button {\r\n    /* font-size: 1vh; */\r\n    background-color: transparent;\r\n    width: 20px;\r\n    height: 20px;\r\n    padding: 0;\r\n    font-weight: bold;\r\n    justify-self: center;\r\n    align-self: center;\r\n    border: none;\r\n  }\r\n  .list button:hover{\r\n    cursor: pointer;\r\n    background-color:rgba(133, 86, 40,0.7);\r\n    color: white;\r\n  }\r\n`\r\n\r\nconst Todo = memo(\r\n  ({ id, todo, isChecked, deleteTodo, updateTodo, toggleCheck }) => {\r\n    const [value, setValue] = useState(todo);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n    const input = useRef(null);\r\n\r\n    useEffect(() => {\r\n      if (isUpdate) {\r\n        input.current.focus();\r\n      }\r\n    }, [isUpdate]);\r\n\r\n    const onClickTodo = () => {\r\n      setIsUpdate(true);\r\n    };\r\n\r\n    const onChangeInput = (e) => {\r\n      setValue(e.target.value);\r\n    };\r\n\r\n    const onFormSubmit = (e) => {\r\n      e.preventDefault();\r\n      setIsUpdate(false);\r\n      if (!value) {\r\n        setValue(todo);\r\n      } else {\r\n        if (todo !== value) {\r\n          updateTodo(id, value, isChecked);\r\n        }\r\n      }\r\n    };\r\n\r\n    const onBlurInput = () => {\r\n      setIsUpdate(false);\r\n      if (value !== todo) {\r\n        updateTodo(id, value, isChecked);\r\n      }\r\n    };\r\n\r\n    const onKeyUpInput = (e) => {\r\n      if (e.key === 'Escape') {\r\n        setIsUpdate(false);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <StyledTodo>\r\n        <li className=\"list\">\r\n          <span className=\"check\" onClick={toggleCheck(id)}>\r\n            {isChecked ? '🥰' : '😶'}\r\n          </span>\r\n          {isUpdate || (\r\n            <span\r\n              className={`todo ${isChecked ? 'checked' : ''}`}\r\n              onClick={onClickTodo}\r\n            >\r\n              {todo}\r\n            </span>\r\n          )}\r\n          {isUpdate && (\r\n            <form className=\"update-form\" onSubmit={onFormSubmit}>\r\n              <input\r\n                ref={input}\r\n                value={value}\r\n                onChange={onChangeInput}\r\n                onBlur={onBlurInput}\r\n                onKeyUp={onKeyUpInput}\r\n              />\r\n            </form>\r\n          )}\r\n          <button onClick={deleteTodo(id)}>X</button>\r\n        </li>\r\n      </StyledTodo>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Todo;","import React, { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport AddForm from \"./AddForm\";\r\nimport Todo from \"./Todo\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTodoList = styled.div`\r\n  .todolist-box {\r\n    width: 400px;\r\n    height: 500px;\r\n    /* background-color: rgba(255,255,255,0.7); */\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    /* border-radius: 20px; */\r\n    /* box-shadow: 0px 0px 5px rgba(0,0,0, 0.1); */\r\n  }\r\n  .header {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n  }\r\n  .info {\r\n    width: 85%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 50px;\r\n    margin-top: 20px;\r\n  }\r\n  .info > span {\r\n    font-weight: bold;\r\n    /* display: none; */\r\n  }\r\n  .info > span::selection {\r\n    color: green;\r\n  }\r\n  h1::selection {\r\n    color: orange;\r\n  }\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 22px;\r\n    line-height: 50px;\r\n  }\r\n\r\n  .date {\r\n    width: 85%;\r\n    font-size: 13px;\r\n    font-weight: 600;\r\n  }\r\n  .date > span::selection {\r\n    color: orange;\r\n  }\r\n  .day {\r\n    margin-left: 5px;\r\n  }\r\n  .day::selection {\r\n    color: orange;\r\n  }\r\n  ul {\r\n    padding: 0;\r\n    height: 340px;\r\n    overflow-x: hidden;\r\n    overflow-y: scroll;\r\n  }\r\n  ul::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst TodoList = () => {\r\n  const [todoList, setTodoList] = useState(() => {\r\n    const localTodoList = localStorage.getItem(\"todoList\");\r\n    return localTodoList ? JSON.parse(localTodoList) : [];\r\n  });\r\n  const [id, setId] = useState(0);\r\n  const isMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (!isMount.current) {\r\n      localStorage.setItem(\"todoList\", JSON.stringify(todoList));\r\n      localStorage.setItem(\"id\", id);\r\n    }\r\n  }, [todoList, id]);\r\n\r\n  useEffect(() => {\r\n    const localTodoList = localStorage.getItem(\"todoList\");\r\n    if (localTodoList) {\r\n      setTodoList(JSON.parse(localTodoList));\r\n    }\r\n    const localId = localStorage.getItem(\"id\");\r\n    if (localId) {\r\n      setId(parseInt(localId));\r\n    }\r\n    isMount.current = false;\r\n  }, []);\r\n\r\n  const addTodo = useCallback(\r\n    (todo) => (e) => {\r\n      console.log(\"add\");\r\n      e.preventDefault();\r\n      if (todo) {\r\n        const currentDate = new Date().toLocaleDateString();\r\n        setTodoList((prevTodoList) => [\r\n          ...prevTodoList,\r\n          {\r\n            id: id,\r\n            todo: todo,\r\n            isChecked: false,\r\n            date: currentDate,\r\n          },\r\n        ]);\r\n        setId((prevId) => prevId + 1);\r\n        localStorage.setItem(\"todoList\", JSON.stringify(todoList));\r\n        localStorage.setItem(\"id\", id);\r\n      }\r\n    },\r\n    [id, todoList]\r\n  );\r\n\r\n  const updateTodo = useCallback(\r\n    (id, todo, isChecked) => {\r\n      const index = todoList.findIndex((todoInfo) => todoInfo.id === id);\r\n      const newTodoList = [...todoList];\r\n      newTodoList.splice(index, 1, {\r\n        id: id,\r\n        todo: todo,\r\n        isChecked: isChecked,\r\n      });\r\n      setTodoList(newTodoList);\r\n    },\r\n    [todoList]\r\n  );\r\n\r\n  const deleteTodo = useCallback(\r\n    (id) => () => {\r\n      const newTodoList = todoList.filter((todoInfo) => todoInfo.id !== id);\r\n      setTodoList(newTodoList);\r\n      localStorage.setItem(\"todoList\", JSON.stringify(newTodoList));\r\n      localStorage.setItem(\"id\", id);\r\n    },\r\n    [todoList]\r\n  );\r\n\r\n  const toggleCheck = useCallback(\r\n    (id) => () => {\r\n      const index = todoList.findIndex((todoInfo) => todoInfo.id === id);\r\n      const newTodoList = [...todoList];\r\n      newTodoList[index].isChecked = newTodoList[index].isChecked\r\n        ? false\r\n        : true;\r\n      setTodoList(newTodoList);\r\n    },\r\n    [todoList]\r\n  );\r\n\r\n  const today = new Date();\r\n  const dateString = today.toLocaleString(\"ko-KR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n  const dayName = today.toLocaleString(\"ko-KR\", { weekday: \"long\" });\r\n\r\n  //남은 할일 갯수 보기\r\n  // const todos = useTodoState();\r\n  // const undoneTasks = todos.filter(todo => !todo.done);\r\n  //{undoneTasks.length}개\r\n  const undone = todoList.filter((todo) => !todo.isChecked);\r\n\r\n  return (\r\n    <StyledTodoList>\r\n      <div className=\"todolist-box\">\r\n        <div className=\"header\">\r\n          <div className=\"info\">\r\n            <h1>오늘의 할 일 목록</h1>\r\n            <span className=\"undone\">{undone.length}개 </span>\r\n          </div>\r\n          <div className=\"date\">\r\n            <span>{dateString}</span>\r\n            <span className=\"day\">{dayName}</span>\r\n          </div>\r\n        </div>\r\n        <AddForm addTodo={addTodo} />\r\n        <ul>\r\n          {todoList.map((todoInfo) => {\r\n            return (\r\n              <Todo\r\n                key={todoInfo.id}\r\n                id={todoInfo.id}\r\n                todo={todoInfo.todo}\r\n                isChecked={todoInfo.isChecked}\r\n                updateTodo={updateTodo}\r\n                deleteTodo={deleteTodo}\r\n                toggleCheck={toggleCheck}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </StyledTodoList>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import TodoList from \"../components/todo/TodoList\";\r\nimport Todo from \"../components/todo/Todo\";\r\nimport AddForm from \"../components/todo/AddForm\";\r\nimport styled from \"styled-components\";\r\nimport { theme } from \"../style/theme\";\r\n\r\nconst TodoContain = styled.div`\r\n  width: 400px;\r\n  height: 500px;\r\n  background-color: ${({ theme }) => theme.containerBackground};\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.color};\r\n  border-radius: 20px;\r\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nfunction TodoPage() {\r\n  return (\r\n    <TodoContain>\r\n      <TodoList>\r\n        <AddForm />\r\n        <Todo />\r\n      </TodoList>\r\n    </TodoContain>\r\n  );\r\n}\r\n\r\nexport default TodoPage;\r\n"],"names":["StyledAddForm","styled","theme","orangeInput","color","greenButton","memo","addTodo","useState","value","setValue","input","useRef","useEffect","current","focus","className","ref","onChange","e","target","placeholder","type","onClick","StyledTodo","id","todo","isChecked","deleteTodo","updateTodo","toggleCheck","isUpdate","setIsUpdate","onSubmit","preventDefault","onBlur","onKeyUp","key","StyledTodoList","localTodoList","localStorage","getItem","JSON","parse","todoList","setTodoList","setId","isMount","setItem","stringify","localId","parseInt","useCallback","console","log","currentDate","Date","toLocaleDateString","prevTodoList","date","prevId","index","findIndex","todoInfo","newTodoList","splice","filter","today","dateString","toLocaleString","year","month","day","dayName","weekday","undone","length","map","TodoContain","containerBackground"],"sourceRoot":""}